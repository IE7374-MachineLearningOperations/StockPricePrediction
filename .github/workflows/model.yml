name: Model Training

on:
  push:
    branches:
      - main 

jobs:
  train_model:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.5'

      # Step 3: Install all dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run Py Tests
      - name: Run Tests
        run: |
          pytest pipeline/airflow/tests --maxfail=1 --disable-warnings

      # Step 5: Authenticate with GCP (Main Branch Only)
      - name: Authenticate to GCP
        if: ${{ github.ref == 'refs/heads/main' }}  
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "${GCP_SERVICE_ACCOUNT_KEY}" | base64 --decode > ${HOME}/gcp-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
          gcloud config set project ${GCP_PROJECT_ID}

      # # Step 6: Conditional Model Training
      # - name: Trigger Model Training
      #   env:
      #     GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
      #   run: |
      #     if [ "${{ github.ref }}" == "refs/heads/main" ]; then
      #       # Production Training on Google Cloud AI Platform
      #       gcloud ai-platform jobs submit training model_training_$(date +%Y%m%d_%H%M%S) \
      #         --region us-central1 \
      #         --module-name trainer.task \
      #         --package-path ./trainer \
      #         --python-version 3.10 \
      #         --runtime-version 2.5 \
      #         --job-dir gs://${GCP_BUCKET_NAME}/models/training_$(date +%Y%m%d_%H%M%S) \
      #         -- \
      #         --additional_training_args
      #     else
      #       # Test Training Locally for the test branch
      #       echo "Running model training locally for testing"
      #       python trainer/task.py --test_data ./data/test_data.csv
      #     fi

      # # Step 7: Save Training Logs as Artifacts
      # - name: Upload Training Logs
      #   if: always()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: training-logs
      #     path: logs/

      # # Step 8: Send notification on failure
      # - name: Notify on failure
      #   if: failure()
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         body: 'Model training failed on `${{ github.ref }}` branch. Please check logs for details.'
      #       })
