import pandas as pd
import yfinance as yf
import requests
from fredapi import Fred
import glob
from datetime import datetime
import sys
import os
import matplotlib.pyplot as plt
import seaborn as sns

# parent_path = os.path.abspath(os.path.dirname(__file__))

# root_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(parent_path))))
# sys.path.append(root_path)
sys.path.append(os.path.abspath("pipeline/airflow"))
sys.path.append(os.path.abspath("."))

from dags.src.download_data import (
    get_yfinance_data,
    get_fama_french_data,
    get_ads_index_data,
    get_sp500_data,
    get_fred_data,
    merge_data,
)
from dags.src.convert_column_dtype import convert_type_of_columns
from dags.src.keep_latest_data import keep_latest_data
from dags.src.remove_weekend_data import remove_weekends
from dags.src.handle_missing import fill_missing_values
from dags.src.correlation import plot_correlation_matrix, removing_correlated_variables


def add_lagged_features(data: pd.DataFrame) -> pd.DataFrame:
    """
    Complete feature engineering process:
    - Selects relevant columns
    - Adds lagged features (1, 3, 5 days) for 'close', 'open', 'high', and 'low'
    - Adds rolling mean and volatility features for 'close' over 5-day and 10-day windows
    - Drops rows with NaN values resulting from these transformations

    Returns:
    - DataFrame with engineered features.
    """

    # Step 1: Define columns for lagged features
    columns_to_lag = ["close", "open", "high", "low"]

    # Step 2: Add lagged features (1-day, 3-day, 5-day lags)
    for column in columns_to_lag:
        data[f"{column}_lag1"] = data[column].shift(1)
        data[f"{column}_lag3"] = data[column].shift(3)
        data[f"{column}_lag5"] = data[column].shift(5)

    # Step 3: Add rolling statistics (5-day and 10-day moving averages and volatility) for 'close'
    data["close_ma5"] = data["close"].rolling(window=5).mean()
    data["close_ma10"] = data["close"].rolling(window=10).mean()
    data["close_vol5"] = data["close"].rolling(window=5).std()
    data["close_vol10"] = data["close"].rolling(window=10).std()

    # Step 4: Drop rows with NaN values generated by lagging and rolling operations
    data = data.dropna()

    return data


if __name__ == "__main__":
    ticker_symbol = "GOOGL"
    data = merge_data(ticker_symbol)
    data = convert_type_of_columns(data)
    filtered_data = keep_latest_data(data, 10)
    removed_weekend_data = remove_weekends(filtered_data)
    filled_data = fill_missing_values(removed_weekend_data)
    removed_correlated_data = removing_correlated_variables(filled_data)
    lagged_data = add_lagged_features(removed_correlated_data)
    # breakpoint()
    print(lagged_data)
